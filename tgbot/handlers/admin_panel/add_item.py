import re

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from sqlalchemy.ext.asyncio import AsyncSession
from tgbot.infrastucture.database.functions.item_func import add_new_item
from tgbot.infrastucture.telegraph.abstract import FileUploader
from tgbot.keyboards.inline.main_buttons import cancel_item, item_back, get_item
from tgbot.misc.delete_markup import delete_markup
from tgbot.misc.states import NewItem
from tgbot.misc.i18n import _


async def new_item(call: CallbackQuery, state: FSMContext):
    await call.answer()

    await call.message.edit_text(_("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"), reply_markup=cancel_item())
    await state.update_data(msg=call.message.message_id)
    await NewItem.Title.set()


async def title(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"), reply_markup=cancel_item())

    await state.update_data(title=message.text, msg=msg.message_id)
    await NewItem.Description.set()


async def title_validation(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚ùå –û—à–∏–±–∫–∞\n‚úèÔ∏è –í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"), reply_markup=cancel_item())
    await state.update_data(msg=msg.message_id)


async def description(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞.\n–ë–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"), reply_markup=cancel_item())

    await state.update_data(description=message.text, msg=msg.message_id)
    await NewItem.Price.set()


async def description_validation(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚ùå –û—à–∏–±–∫–∞\n‚úèÔ∏è –í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"), reply_markup=cancel_item())
    await state.update_data(msg=msg.message_id)


async def validation_title_description(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚ùå –û—à–∏–±–∫–∞\n‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"), reply_markup=cancel_item())
    await state.update_data(msg=msg.message_id)


async def price(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞\n"), reply_markup=cancel_item())

    await state.update_data(price=int(message.text), msg=msg.message_id)
    await NewItem.Quantity.set()


async def quantity(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("üèû –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞"), reply_markup=cancel_item())

    await state.update_data(quantity=int(message.text), msg=msg.message_id)
    await NewItem.Photo.set()


async def validation_price_quantity(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚ùå –û—à–∏–±–∫–∞\nüîñ –£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.\n"
                                 "–¢–∞–∫–∂–µ —Ü–∏—Ñ—Ä –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ."), reply_markup=cancel_item())
    await state.update_data(msg=msg.message_id)


async def photo(message: types.Message, state: FSMContext, file_uploader: FileUploader):
    await delete_markup(message, state)
    photo = message.photo[-1]

    await message.bot.send_chat_action(message.chat.id, 'upload_photo')
    uploaded_photo = await file_uploader.upload_photo(photo)

    await state.update_data(photo_link=uploaded_photo.link)
    await get_item(message, state)
    await NewItem.Finish.set()


async def photo_validation(message: types.Message, state: FSMContext):
    await delete_markup(message, state)
    msg = await message.answer(_("‚ùå –û—à–∏–±–∫–∞\nüèû –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ"), reply_markup=cancel_item())
    await state.update_data(msg=msg.message_id)


async def accept_item(call: CallbackQuery, state: FSMContext, session: AsyncSession):
    await call.answer()

    data = await state.get_data()

    title = data['title']
    description = data['description']
    price = data['price']
    quantity = data['quantity']
    photo_link = data['photo_link']

    await add_new_item(session, title=title, description=description, price=price, quantity=quantity, photo_link=photo_link)

    await call.message.delete()

    await call.message.answer(_("üéâ –í—ã —Å–æ–∑–¥–∞–ª–∏ —Ç–æ–≤–∞—Ä"), reply_markup=item_back())

    await state.finish()


async def reject_item(call: CallbackQuery, state: FSMContext):
    await call.answer()

    await call.message.answer(_('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'))
    await call.message.delete()
    await state.finish()


async def item_cancel(call: CallbackQuery, state: FSMContext):
    await call.answer()

    await call.message.edit_text(_("‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"), reply_markup=item_back())
    await state.finish()


def register_add_item(dp: Dispatcher):
    dp.register_callback_query_handler(item_cancel, text="item_cancel", state="*")
    dp.register_callback_query_handler(new_item, text="new_item")
    dp.register_message_handler(title, regexp=re.compile(r'^.{1,50}$'), state=NewItem.Title)
    dp.register_message_handler(title_validation, state=NewItem.Title)
    dp.register_message_handler(description, regexp=re.compile(r'^.{1,800}$'), state=NewItem.Description)
    dp.register_message_handler(description_validation, state=NewItem.Description)

    dp.register_message_handler(validation_title_description, state=[NewItem.Title, NewItem.Description], content_types=['any'])

    dp.register_message_handler(price, regexp=re.compile(r'^[0-9]{1,5}$'), state=NewItem.Price)
    dp.register_message_handler(quantity, regexp=re.compile(r'^[0-9]{1,5}$'), state=NewItem.Quantity)

    dp.register_message_handler(validation_price_quantity, state=[NewItem.Price, NewItem.Quantity], content_types=['any'])

    dp.register_message_handler(photo, state=NewItem.Photo, content_types=types.ContentType.PHOTO)
    dp.register_message_handler(photo_validation, state=NewItem.Photo, content_types=['any'])

    dp.register_callback_query_handler(accept_item, text="accept", state=NewItem.Finish)
    dp.register_callback_query_handler(reject_item, text="reject", state=NewItem.Finish)


